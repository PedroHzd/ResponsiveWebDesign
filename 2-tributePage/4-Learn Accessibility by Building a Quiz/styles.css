/*Certain types of motion-based animations can cause discomfort for some users. In particular, people with vestibular 
  disorders have sensitivity to certain motion triggers. 

  The @media at-rule has a media feature called prefers-reduced-motion to set CSS based on the user's preferences.
  It can take one of the following values: reduce, no-preference.

  @media (feature: value) {
    selector {
      css styles
    }
  }
*/

@media (prefers-reduced-motion: no-preference) {
  * {
    scroll-behavior: smooth;
    /*The scroll-behavior property specifies whether to smoothly animate the scroll position,
      instead of a straight jump, when the user clicks on a link within a scrollable box.
      
      https://www.w3schools.com/cssref/pr_scroll-behavior.php
    */
  }
  /*Universal selector (*) selects all HTML elements on the page https://www.w3schools.com/CSS/css_selectors.asp*/
}

body {
  background: #f5f6f7;
  color: #1b1b32;
  font-family: Helvetica;
  margin: 0;
}

header {
  width: 100%;
  height: 50px;
  background-color: #1b1b32;
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: fixed; /*https://www.w3schools.com/Css/css_positioning.asp*/
  top: 0;
  /*The top property affects the vertical position of a positioned element. This property has no effect on
    non-positioned elements.

    If position: absolute; or position: fixed; - The top property sets the top edge of an elemnet to a unit
    above/below the top edge of tis nearest positionted ancestor.

    https://www.w3schools.com/cssref/pr_pos_top.php
  */
}

#logo {
  width: max(100px, 18vw);
  /*A useful property of an SVG(scalable vector graphics) is that it contains a path attribute which allows
    the image to be scaled wihtout affecting the resolution of the resultant image. Currently, the img is 
    assuming its default size, which may be too large or too small. 
    
    CSS has a max function which returns the largest of a set of comma-separated values. 
    Here the width will consider which of the two values is the largest. vw units are dependent on the size 
    of user's creen. If 18vw turns out is more than 100px, it use 18vw as the width.
    
    The vw units stands for viewport. vw is relative to 1% of the width of the viewport.
    Ex: if the viewport is 50cm, 1vw = 0.5cm.
    
    https://www.youtube.com/watch?v=U9VF-4euyRo (good source explaning more in detail)*/
  background-color: #0a0a23;
  aspect-ratio: 35 / 4;
  /*The aspect-ratio: property allows you to define the ratio between width and height of an element.
    If aspect-ratio and width properties are set, the height will follow in the defined aspect ratio.
    
    Use the aspect-radio property in responsive layouts where elements often vary in size and you want to 
    preserve the ratio between width and height. 

    The aspect-ratio property is good for controlling aspect ratio of div elements if the div elements are 
    supposed to vary in size. This can be the case in an image gallery when you want div elements to be
    flexible in size to look good on all devices, but you also want radio between width and height of the 
    images to be preserved. 

    https://www.w3schools.com/Cssref/css_pr_aspect-ratio.php (for examples)*/
  padding: 0.4rem;
}

h1 {
  color: #f1be32;
  font-size: min(5vw, 1.2em);
  /*font-size will use the smallest measurement provided.*/
  text-align: center;
}

nav {
  width: 50%;
  max-width: 300px;
  height: 50px;
}
/*nav > ul {} This is called the child selector and is similar to descendant selector. The child seletor
  targets any element that is a direct child from the parent element. In this case, the selector 
  will target all <ul> elements that are direct child of a <nav>.

  nav ul {} This is the descendant selector. The difference is that a descendant can be a child of the
  element, or a child of a child of the element or a child of a child of a child... With this selector, 
  it will target all ul element inside the <nav> element no matter no deeply nested. */
nav > ul {
  display: flex;
  justify-content: space-evenly;
  flex-wrap: wrap;
  align-items: center;
  padding-inline-start: 0;
  /*An element's padding-inline-start is the space from its border to its content, at the start in the inline direrection
    https://www.w3schools.com/CSSref/css_pr_padding-inline-start.php --

    padding-inline both left and right
    padding-inline-start === left and padding-inline-end === right

    padding-block both top and bottom
    padding-block-start === top and padding-block-end === bottom

    padding-inline and padding-block are dependent on inline and block directions.
  */
  margin-block: 0;
  /*https://www.w3schools.com/CSSref/css_pr_margin-block.php similar to padding-inline or padding-block 
    but it changes the margins instead of padding
  */
  height: 100%;
}
/*The child selector can be chained to target a specific element*/
nav > ul > li {
  color: #dfdfe2;
  margin: 0 0.2rem;
  padding: 0.2rem;
  display: block;
}

nav > ul > li:hover {
  background-color: #dfdfe2;
  color: #1b1b32;
  cursor: pointer;
  /*Links can be styled differently depending on what state they are in. The four link state are:
    a:link - a normal, unvisited link
    a:visited - a link the user has visited
    a:hover - a link when the user mouses over it
    a:active - a link the moment it is clicked
    
    https://www.w3schools.com/Css/css_link.asp for more examples and css properties  
  */
}

li > a {
  color: inherit;
  text-decoration: none; /*To remove the underline*/
}

main {
  padding-top: 50px;
}

section {
  width: 80%;
  margin: 0 auto 10px auto;
  max-width: 600px;
}

h1,
h2 {
  font-family: Verdana, Tahoma;
  /*Typeface plays an important role in the accessibility of a page. Some fonts are easier to read
    than others, and this is especially true on low-resolution screens.*/
}

h2 {
  border-bottom: 4px solid #dfdfe2;
  margin-top: 0px;
  padding-top: 60px;
}

.info {
  padding: 10px 0 0 5px;
}

.formrow {
  margin-top: 30px;
  padding: 0px 15px;
}

input {
  font-size: 16px;
}

.info label, .info input {
  display: inline-block;
}

.info input {
  width: 50%;
  text-align: left;
}

.info label {
  width: 10%;
  min-width: 55px;
  text-align: right;
}

.question-block {
  text-align: left;
  display: block;
  width: 100%;
  margin-top: 20px;
  padding-top: 5px;
}

p {
  margin-top: 5px;
  padding-left: 15px;
  font-size: 20px;
}

p::before {
  content: "Question #";
  /*The ::before pseudo-element can be used to insert some content before the content
    of an element. 

    The <p> element now displays Question #1
    
    The content property is used with the ::before and ::after pseudo-element, to insert
    generated content.
  
  */
}

.question {
  border: none;
  padding-bottom: 0;
}

.answers-list {
  list-style: none;
  /*https://www.w3schools.com/CSS/css_list.asp reference to style <li> <ol> <ul> elements*/
  padding: 0;
}

button {
  display: block;
  margin: 40px auto;
  width: 40%;
  padding: 15px;
  font-size: 23px;
  background: #d0d0d5;
  border: 3px solid #3b3b4f;
}

footer {
  background-color: #2a2a40;
  display: flex;
  justify-content: center;
}

footer,
footer a {
  color: #dfdfe2;
}

address {
  text-align: center;
  padding: 0.3em;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
  /*-position: This is a common patter to visually hide text for only screen readers to read.

    -position: property specifies the type of positioning method used for an element.
    It has different values static(default), relative, absolute, fixed, sticky.
    
    absolute; The element is positioned relative to its first positioned (not static) ancestor element.

    https://www.w3schools.com/Css/css_positioning.asp for a demo */

  /*-overflow: property specifies what should happen if content overflows an element's box.
    This property specifies whether to clip content or to add scrollbars when an element's 
    content is too big to fit in a specified area. 
    !! The overflow property only works for block elements with a specified height.

    hidden; The overflow is clipped, and the rest of the content will be invisible. Content can be
    scrolled programmatically. 

    https://www.w3schools.com/Css/css_overflow.asp more information on other values*/

  /*-clip: property lets you specify a rectangle to clip an absolutely positioned element. The
    rectangle is specified as four cordinates, all from the top-left corner of the element to be
    clip.
    !!The clip property does not work if "overflow: visible;"
    !!This is property is deprecated and will be replaced by clip-path in the future.

    https://www.w3schools.com/cssref/pr_pos_clip.php
    https://www.w3schools.com/cssref/css3_pr_clip-path.php */

  /*-white-space: property specifies how white-space insider an element is handled.

    nowrap: Sequences of whitespace will collapse into a single whitespace. Text will never wrap
    to the next line. The text continues on the same line until <br> is encountered. 

    https://www.w3schools.com/cssref/pr_text_white-space.php  more information on different value.*/
}
